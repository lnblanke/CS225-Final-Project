#include "../lib/algorithm/tarjan.h"
#include "test.h"

using namespace test;

typedef vector<vector<size_t>> v2d;

#define begin(i) size_t i = 0

bool check(const Graph& g, const v2d& real, const map<Vertex*, size_t>& result) {
    for (begin(i); i < real.size(); i++) {
        for (begin(j); j < real[i].size(); j++) {
            for (auto k = j + 1; k < real[i].size(); k++) {
                if (result.at(g.getVertex(to_string(real[i][j]))) != 
                    result.at(g.getVertex(to_string(real[i][k]))))
                    return 0;
            }
        }
    }

    for (begin(i); i < real.size(); i++) {
        for (auto j = i + 1; j < real.size(); j++) {
            for (begin(k); k < real[i].size(); k++) {
                for (begin(t); t < real[j].size(); t++) {
                    if (result.at(g.getVertex(to_string(real[i][k]))) ==
                        result.at(g.getVertex(to_string(real[j][t]))))
                        return 0;
                }
            }
        }
    }

    return 1;
}

TEST_CASE("Test tarjan simple", "[tarjan]") {
    setVertices(10);

    add_edge(0, 1);
    add_edge(0, 3);
    add_edge(1, 4);
    add_edge(1, 2);
    add_edge(1, 9);
    add_edge(2, 4);
    add_edge(2, 5);
    add_edge(3, 4);
    add_edge(4, 8);
    add_edge(4, 5);
    add_edge(5, 8);
    add_edge(5, 6);
    add_edge(7, 5);
    add_edge(7, 6);
    add_edge(8, 4);
    add_edge(8, 3);
    add_edge(8, 6);

    auto result = algorithm::tarjan(g);

    v2d ans = {{0}, {1}, {2}, {3, 4, 5, 8}, {6}, {7}, {9}};

    REQUIRE(check(g, ans, result));
}

TEST_CASE("Test tarjan middle", "[tarjan]") {
    setVertices(10);
    config_adj_matrix({{0., 0., 6., 0., 3., 0., 0., 0., 0., 8.},
       {0., 0., 0., 0., 0., 7., 5., 6., 3., 0.},
       {6., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
       {0., 0., 6., 0., 0., 0., 2., 0., 4., 4.},
       {2., 0., 0., 0., 0., 0., 0., 6., 0., 0.},
       {0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
       {0., 0., 0., 0., 0., 0., 0., 3., 7., 1.},
       {0., 0., 0., 0., 0., 0., 6., 0., 8., 0.},
       {8., 0., 0., 0., 4., 0., 4., 9., 0., 1.},
       {3., 0., 0., 0., 0., 0., 0., 0., 1., 0.}});

    auto result = algorithm::tarjan(g);

    v2d ans = {{0, 2, 4, 6, 7, 8, 9}, {1}, {3}, {5}};

    REQUIRE(check(g, ans, result));
}

TEST_CASE("Test tarjan large", "[tarjan]") {
    setVertices(20);
    config_adj_matrix({{ 0.,  0.,  0.,  0.,  0.,  0.,  0., 19.,  0.,  0., 10.,  0.,  0.,
         0.,  0.,  0.,  0.,  0., 11., 11.},
       { 0.,  0.,  0., 12.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  2.,
         2.,  0.,  0.,  0.,  4.,  0.,  0.},
       { 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., 10.,  0.,  0.,  0.,  0.,
         0.,  2.,  0.,  0.,  0.,  0.,  6.},
       {15.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  4.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.},
       { 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  8.,  2.,  0.,
         0.,  0.,  0.,  0.,  0., 18.,  0.},
       { 0.,  0.,  0.,  0.,  0.,  0.,  9.,  0.,  0.,  0.,  0.,  0.,  0.,
        19.,  0.,  0.,  0.,  0.,  0.,  0.},
       { 0.,  0.,  0., 18.,  0.,  0.,  0., 10.,  8.,  0.,  0.,  0.,  2.,
         0., 16.,  0.,  0., 13.,  0.,  0.},
       { 0., 17.,  0.,  2.,  0.,  0.,  0.,  0.,  0.,  5., 10.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  6.,  6.},
       { 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., 14.,  3.,  0.,  0.,
         0.,  0.,  6., 11.,  8.,  0.,  0.},
       { 0.,  8.,  0.,  0.,  0., 19.,  7.,  0.,  0.,  0.,  3.,  0.,  0.,
         0.,  0.,  4.,  0.,  0.,  0., 12.},
       { 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  9., 10.,
         4.,  0.,  0.,  0.,  0.,  0.,  0.},
       { 0.,  0.,  9.,  0.,  0., 11.,  0.,  0.,  9.,  0., 10.,  0., 17.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.},
       { 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  3.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.},
       { 0.,  9.,  0.,  0.,  0.,  0., 17.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  0., 10.,  0.,  0.,  0.},
       { 6.,  0., 11.,  0.,  0.,  0., 18.,  0.,  0.,  0.,  0.,  0.,  5.,
        17.,  0.,  0.,  0.,  0.,  0.,  0.},
       { 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  5.,  0.,  0.,  0.,  0.,
        17.,  0.,  0.,  0.,  0.,  0.,  0.},
       { 6.,  0.,  0.,  0.,  4.,  0.,  0.,  0.,  2.,  0.,  0.,  0.,  0.,
        12.,  0.,  0.,  0.,  0.,  0., 14.},
       { 0.,  0.,  0., 17.,  0., 10.,  0.,  0.,  0.,  6., 10., 10., 10.,
         0.,  0.,  0.,  0.,  0.,  8., 14.},
       { 0.,  0., 17.,  0.,  0.,  0.,  0.,  0.,  0.,  0., 19.,  0.,  0.,
         0.,  0.,  0.,  0., 19.,  0.,  0.},
       { 0.,  0.,  0.,  7.,  0.,  0.,  0.,  0.,  0., 16.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  6.,  0.}});

    auto result = algorithm::tarjan(g);

    v2d ans = {{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}};

    REQUIRE(check(g, ans, result));
}