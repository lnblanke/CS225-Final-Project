#include "test.h"
#include "../lib/algorithm/dinic.h"

using namespace test;

static void checkWeights(const Graph& g, const vector<double>& weight) {
    for (auto i = 0ul; i < weight.size(); i++)
        REQUIRE(g.getEdge(i + 1).w == weight[i]);
}

TEST_CASE("Test Dinic small", "[dinic]") {
    setVertices(5);
    add_edge(0, 1, 1);
    add_edge(1, 0, 0);
    add_edge(0, 4, 5);
    add_edge(4, 0, 0);
    add_edge(0, 2, 2);
    add_edge(2, 0, 0);
    add_edge(1, 3, 4);
    add_edge(3, 1, 0);
    add_edge(2, 3, 2);
    add_edge(3, 2, 0);
    add_edge(2, 4, 6);
    add_edge(4, 2, 0);
    add_edge(3, 4, 1);
    add_edge(4, 3, 0);
    add_edge(2, 1, 3);
    add_edge(1, 2, 0);

    REQUIRE(algorithm::dinic(g, vertex(0), vertex(4)) == 8);

    vector<double> weights = {0, 1, 0, 5, 0, 2, 3, 1, 2, 0, 4, 2, 0, 1, 3, 0};

    checkWeights(g, weights);
}

TEST_CASE("Test dinic middle", "[dinic]") {
    setVertices(10);
    config_adj_matrix({{0., 0., 6., 0., 0., 0., 3., 0., 4., 7.},
       {0., 0., 1., 0., 7., 1., 0., 7., 3., 7.},
       {0., 0., 0., 0., 0., 0., 0., 4., 4., 5.},
       {5., 9., 0., 0., 0., 0., 2., 0., 9., 2.},
       {0., 0., 1., 7., 0., 2., 2., 3., 4., 6.},
       {1., 0., 2., 0., 5., 0., 0., 6., 7., 0.},
       {3., 8., 0., 6., 5., 0., 0., 6., 0., 0.},
       {8., 6., 0., 9., 0., 0., 6., 0., 0., 0.},
       {7., 3., 4., 0., 8., 0., 0., 0., 0., 0.},
       {8., 2., 0., 0., 1., 0., 0., 1., 4., 0.}});

    REQUIRE(algorithm::dinic(g, vertex(0), vertex(9)) == 36);

    vector<double> weights = {7, 2, 11, 0, 1, 7, 1, 7, 10, 0, 4, 4, 0, 10, 9, 2, 11, 0, 1, 7, 2, 2, 3, 4, 0, 7, 2, 5, 6, 7, 7, 4, 4, 7, 6, 8, 6, 9, 6, 7, 0, 7, 2, 14, 2, 1, 1, 4};

    checkWeights(g, weights);
}

TEST_CASE("Test dinic large", "[dinic]") {
    setVertices(20);
    config_adj_matrix({{ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  1.,  0.,  0.},
       { 0.,  0.,  8.,  0.,  0.,  0.,  0., 13.,  0.,  0.,  0.,  0.,  0.,
         0.,  0., 19., 17.,  0.,  0.,  0.},
       { 0.,  6.,  0.,  0.,  0.,  0.,  0.,  0.,  5., 12.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0., 15.},
       { 0.,  0.,  0.,  0.,  0.,  0., 17.,  0.,  0.,  0.,  9.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0., 15.},
       { 0.,  0.,  0.,  0.,  0.,  6.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         1.,  0.,  1.,  5.,  0.,  0.,  0.},
       {11.,  3., 12.,  0.,  0.,  0.,  0.,  0., 10.,  0.,  0.,  0., 19.,
         0.,  0.,  0.,  8.,  0.,  6.,  0.},
       { 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  9.,  0.,  0.,  0.,
         0.,  0., 10.,  0.,  0.,  0.,  0.},
       { 0.,  0.,  0.,  0.,  0.,  6.,  0.,  0.,  0.,  0.,  0.,  0.,  4.,
         0.,  0.,  1.,  0.,  0.,  0.,  0.},
       { 0.,  0.,  0.,  0.,  0.,  0.,  8.,  0.,  0., 16.,  9.,  0.,  0.,
         0.,  0.,  0., 14.,  0.,  8.,  0.},
       { 9.,  0.,  0., 17.,  0., 15.,  0.,  3.,  0.,  0.,  0., 11., 12.,
         0.,  0., 10.,  0.,  0.,  5.,  0.},
       {18., 15., 16.,  9.,  0.,  0.,  0.,  0.,  0.,  2.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.},
        { 0., 17., 11.,  0.,  0.,  0.,  0.,  0., 10.,  0.,  0.,  0.,  0.,
        13.,  0.,  0., 10.,  9., 16.,  0.},
       { 0.,  0.,  0., 19.,  6.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  0.,  6.,  0.,  0.,  0.},
       { 0.,  0.,  0.,  0.,  0.,  2.,  0.,  0.,  0.,  0.,  0., 16.,  5.,
         0.,  0.,  9.,  0.,  0., 16.,  0.},
       { 0.,  0.,  0.,  0.,  0.,  0.,  4.,  0.,  4.,  0.,  0.,  0.,  0.,
        18.,  0.,  0.,  4.,  0.,  0.,  0.},
       { 0.,  6.,  0.,  0.,  0.,  0.,  0.,  3.,  0.,  0.,  0., 13.,  4.,
         0.,  5.,  0.,  0.,  7.,  0.,  0.},
       {12.,  0.,  0.,  0.,  0., 17., 16.,  4.,  1.,  0.,  6.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.},
       {14.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.},
       { 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  4.,  1.,  0.,  0.,  0.,
        12.,  0.,  0.,  0.,  0.,  0.,  0.},
       { 9.,  0.,  0., 16.,  0.,  0.,  0.,  3.,  0.,  7.,  0.,  0.,  0.,
         9.,  0.,  1.,  0.,  0., 16.,  0.}});

    REQUIRE(algorithm::dinic(g, vertex(0), vertex(19)) == 0);

    vector<double> weights = {1, 8, 13, 19, 17, 6, 5, 12, 15, 17, 9, 15, 6, 1, 1, 5, 11, 3, 12, 10, 19, 8, 6, 9, 10, 6, 4, 1, 8, 16, 9, 14, 8, 9, 17, 15, 3, 11, 12, 10, 5, 18, 15, 16, 9, 2, 17, 11, 10, 13, 10, 9, 16, 19, 6, 6, 2, 16, 5, 9, 16, 4, 4, 18, 4, 6, 3, 13, 4, 5, 7, 12, 17, 16, 4, 1, 6, 14, 4, 1, 12, 9, 16, 3, 7, 9, 1, 16};

    checkWeights(g, weights);
}